From e2e5993c6e0a85f42e81e92d26dc5cd88e7c501f Mon Sep 17 00:00:00 2001
From: "Uwe L. Korn" <uwe.korn@quantco.com>
Date: Fri, 9 Oct 2020 14:23:04 +0200
Subject: [PATCH 1/3] Mark r_vector::const_iterator::operator* as const

Fixes #113
---
 inst/include/cpp11/list.hpp     | 2 +-
 inst/include/cpp11/r_vector.hpp | 8 ++++----
 inst/include/cpp11/strings.hpp  | 2 +-
 3 files changed, 6 insertions(+), 6 deletions(-)

diff --git a/inst/include/cpp11/list.hpp b/inst/include/cpp11/list.hpp
index 43c6fc2..c848db9 100644
--- a/inst/include/cpp11/list.hpp
+++ b/inst/include/cpp11/list.hpp
@@ -52,7 +52,7 @@ inline void r_vector<SEXP>::const_iterator::fill_buf(R_xlen_t) {
 }
 
 template <>
-inline SEXP r_vector<SEXP>::const_iterator::operator*() {
+inline SEXP r_vector<SEXP>::const_iterator::operator*() const {
   return VECTOR_ELT(data_->data(), pos_);
 }
 
diff --git a/inst/include/cpp11/r_vector.hpp b/inst/include/cpp11/r_vector.hpp
index dc696c1..1d0eb49 100644
--- a/inst/include/cpp11/r_vector.hpp
+++ b/inst/include/cpp11/r_vector.hpp
@@ -155,7 +155,7 @@ class r_vector {
     inline bool operator!=(const const_iterator& other) const;
     inline bool operator==(const const_iterator& other) const;
 
-    inline T operator*();
+    inline T operator*() const;
 
     friend class writable::r_vector<T>::iterator;
 
@@ -265,7 +265,7 @@ class r_vector : public cpp11::r_vector<T> {
 
     inline iterator& operator++();
 
-    inline proxy operator*();
+    inline proxy operator*() const;
 
     using cpp11::r_vector<T>::const_iterator::operator!=;
 
@@ -554,7 +554,7 @@ inline typename cpp11::r_vector<T>::const_iterator cpp11::r_vector<T>::find(
 }
 
 template <typename T>
-inline T r_vector<T>::const_iterator::operator*() {
+inline T r_vector<T>::const_iterator::operator*() const {
   if (data_->is_altrep()) {
     return buf_[pos_ - block_start_];
   } else {
@@ -586,7 +586,7 @@ r_vector<T>::proxy::proxy(SEXP data, const R_xlen_t index, T* const p, bool is_a
     : data_(data), index_(index), p_(p), is_altrep_(is_altrep) {}
 
 template <typename T>
-inline typename r_vector<T>::proxy r_vector<T>::iterator::operator*() {
+inline typename r_vector<T>::proxy r_vector<T>::iterator::operator*() const {
   if (data_.is_altrep()) {
     return proxy(data_.data(), pos_, &buf_[pos_ - block_start_], true);
   } else {
diff --git a/inst/include/cpp11/strings.hpp b/inst/include/cpp11/strings.hpp
index 311abe9..bf5b1b2 100644
--- a/inst/include/cpp11/strings.hpp
+++ b/inst/include/cpp11/strings.hpp
@@ -41,7 +41,7 @@ inline void r_vector<r_string>::const_iterator::fill_buf(R_xlen_t) {
 }
 
 template <>
-inline r_string r_vector<r_string>::const_iterator::operator*() {
+inline r_string r_vector<r_string>::const_iterator::operator*() const {
   return STRING_ELT(data_->data(), pos_);
 }
 
-- 
2.28.0

